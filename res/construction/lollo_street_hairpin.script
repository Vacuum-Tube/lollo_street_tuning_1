local pitchHelper = require('lollo_street_tuning/pitchHelper')
local streetChunksHelper = require('lollo_street_tuning/lolloStreetChunksHelper')

function data()
    return {
        updateFn = function(params, two)
            local function _initParams()
				if not(params.streetType_) or not(two.globalStreetData[params.streetType_ + 1]) then
					params.streetType_ = 0
				end
			end
			_initParams()

            local result = { cost = 0 }
            result.groundFaces = {}
            -- result.colliders = {}
            -- LOLLO NOTE If some edges are not free, I will need a dummy model,
            -- otherwise the game will say "hello there" or "easter egg" or other rubbish,
            -- then point away (to some animal) and do nothing,
            -- when the user clicks on a done construction to configure it.
            result.models = {
                {
                    id = 'lollo_assets/lollo_dummy.mdl',
                    skipCollision = true,
                    transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1}
                }
            }
            -- LOLLO NOTE I cannot use KEEP here
            local tramTrackType = params.tramTrack_ and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack_ + 1]) or 'NO'
            -- LOLLO NOTE we have 3 edges for every hairpin bend. The inner nodes do not snap, the outer ones do.
            -- This is required if we want to make them snappable at all and avoid crashes.
            -- The 2 outer nodes are always free, otherwise the curve cannot join the other streets.
            -- If I make the 4 inner nodes free, the curve will become a street like all the others once plopped:
            -- I can upgrade them later with common street tools,
            -- I can join other streets into the curve
            -- clicking the bend won't bring up the construction menu (once plopped).
            -- Otherwise, the construction will stay isolated from the rest,
            -- and clicking it will bring up the params menu.
            result.edgeLists = streetChunksHelper.getStreetHairpinSnapEdgeLists(
                params,
                pitchHelper.getPitchAngle(params),
                two.globalStreetData[params.streetType_ + 1],
                two.globalBridgeData[params.bridgeType_ + 1],
                tramTrackType
            )
            -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
            result.terrainAlignmentLists = { { type = "EQUAL", optional = true, faces =  { } } }

            return result
        end,
        getModelsFn = function(variant, closureParams)
            print('LOLLO getModelsFn') -- never fires
            debugPrint(variant)
            debugPrint(closureParams)
            return {}
        end,
        -- preProcessFn = function(one, two, three)
        --     print('LOLLO preProcessFn') -- never fires coz construction is not modular
        --     debugger()
        --     debugPrint(one)
        --     debugPrint(two)
        --     debugPrint(three)
        -- end,
        upgradeFn = function(_)
            print('LOLLO upgradeFn') -- never fires
            -- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
            -- If you leave it out, adding and removing tram tracks won't work.
            -- (Bus lanes don't work anyway.)
            return {}
        end,
        -- createTemplateFn = function(one, two, three)
        --     print('LOLLO createTemplateFn') -- never fires
        --     debugger()
        --     debugPrint(one)
        --     debugPrint(two)
        --     debugPrint(three)
        -- end,
    }
end