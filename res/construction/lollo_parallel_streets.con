local dump = require 'luadump'
local inspect = require('inspect')
local vec3 = require 'vec3'
local transf = require 'transf'
local arrayUtils = require('arrayUtils')
local fileUtils = require('fileUtils')
local parallelStreetHelper = require('parallelStreetHelper')
local pitchUtil = require('pitchUtil')
local stringUtils = require('stringUtils')
function data()
    local _parallelisedStreetTypes = {
        'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
        'lollo_medium_1_way_1_lane_street.lua'
    }
    local function _getNonSnapEdgeLists(params, pitch, streetData, streetType, tramTrackType)
        local edgeLists
        if params.howManyStreetsBase0 == 0 then -- 1 street
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(direction, pitch, node0, node1, tan0, tan1)(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth, 0, 0},
                        {streetHalfWidth, 0, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    -- edgeType = "BRIDGE",
                    -- edgeTypeName = "cement.lua",
                    -- collider = {
                    --     type = 'NONE'
                    -- },
                    -- autoRemovable = true,
                    --skipCollision = true, --useless
                    --skipCollisionCheck = true, --useless
                    -- nodes that stick out of the construction and can be upgraded with the street tools
                    freeNodes = {0, 1},
                    -- nodes allowed to snap to other edges of the same type
                    snapNodes = {}
                    --					tag2nodes = {},
                }
            }
        elseif params.howManyStreetsBase0 == 1 then -- 2 streets
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            local halfDistance = params.distance / 2.0
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                }
            }
        elseif params.howManyStreetsBase0 == 2 then -- 3 streets
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            local streetFullWidth = streetData.sidewalkWidth + streetData.sidewalkWidth + streetData.streetWidth
            local distance = params.distance
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth, -streetFullWidth - distance, 0},
                        {streetHalfWidth, -streetFullWidth - distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionTwo, pitch, {-streetHalfWidth, 0, 0}, {streetHalfWidth, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = {0, 1},
                    snapNodes = {}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {-streetHalfWidth, streetFullWidth + distance, 0},
                        {streetHalfWidth, streetFullWidth + distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                }
            }
        else --if params.howManyStreetsBase0 == 3 then -- 4 streets -- always provide a fallback just in case
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            local streetThreeHalfWidth = 3.0 * streetHalfWidth
            local halfDistance = params.distance / 2.0
            local threeHalfDistance = 3.0 * halfDistance
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {streetHalfWidth, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {-streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionFour,
                        pitch,
                        {-streetHalfWidth, streetThreeHalfWidth + threeHalfDistance, 0},
                        {streetHalfWidth, streetThreeHalfWidth + threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {}
                }
            }
        end
        return edgeLists
    end

    local function _getSnapEdgeLists(params, pitch, streetData, streetType, tramTrackType)
        local edgeLists
        if params.howManyStreetsBase0 == 0 then -- 1 street
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {-streetHalfWidth, 0, 0}, {0, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    -- edgeType = "BRIDGE",
                    -- edgeTypeName = "cement.lua",
                    -- collider = {
                    --     type = 'NONE'
                    -- },
                    -- autoRemovable = true,
                    --skipCollision = true, --useless
                    --skipCollisionCheck = true, --useless
                    -- nodes that stick out of the construction
                    freeNodes = params.directionOne == 0 and {0} or {1},
                    -- nodes allowed to snap to other edges of the same type
                    snapNodes = params.directionOne == 0 and {0} or {1}
                    --					snapNodes = { 0, 1 },  -- node 0 and 1 are allowed to snap to other edges of the same type --crashes
                    --					tag2nodes = {},
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {0, 0, 0}, {streetHalfWidth, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionOne == 0 and {1} or {0},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                }
            }
        elseif params.howManyStreetsBase0 == 1 then -- 2 streets
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            local halfDistance = params.distance / 2.0
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {0, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {0} or {1},
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {0, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionTwo == 0 and {0} or {1},
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {0, -streetHalfWidth - halfDistance, 0},
                        {streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {1} or {0},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {0, streetHalfWidth + halfDistance, 0},
                        {streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionTwo == 0 and {1} or {0},
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                }
            }
        elseif params.howManyStreetsBase0 == 2 then -- 3 streets
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            local streetFullWidth = streetData.sidewalkWidth + streetData.sidewalkWidth + streetData.streetWidth
            local distance = params.distance
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {-streetHalfWidth, -streetFullWidth - distance, 0}, {0, -streetFullWidth - distance, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionOne == 0 and {0} or {1},
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionTwo, pitch, {-streetHalfWidth, 0, 0}, {0, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionTwo == 0 and {0} or {1},
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionThree, pitch, {-streetHalfWidth, streetFullWidth + distance, 0}, {0, streetFullWidth + distance, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionThree == 0 and {0} or {1},
                    snapNodes = params.directionThree == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {0, -streetFullWidth - distance, 0}, {streetHalfWidth, -streetFullWidth - distance, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionOne == 0 and {1} or {0},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionTwo, pitch, {0, 0, 0}, {streetHalfWidth, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionTwo == 0 and {1} or {0},
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionThree, pitch, {0, streetFullWidth + distance, 0}, {streetHalfWidth, streetFullWidth + distance, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionThree == 0 and {1} or {0},
                    snapNodes = params.directionThree == 0 and {1} or {0}
                }
            }
        else --if params.howManyStreetsBase0 == 3 then -- 4 streets -- always provide a fallback just in case
            local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
            local streetThreeHalfWidth = 3.0 * streetHalfWidth
            local halfDistance = params.distance / 2.0
            local threeHalfDistance = 3.0 * halfDistance
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {0, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {0} or {1},
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {0, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionTwo == 0 and {0} or {1},
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {-streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {0, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionThree == 0 and {0} or {1},
                    snapNodes = params.directionThree == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionFour,
                        pitch,
                        {-streetHalfWidth, streetThreeHalfWidth + threeHalfDistance, 0},
                        {0, streetThreeHalfWidth + threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionFour == 0 and {0} or {1},
                    snapNodes = params.directionFour == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {0, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {streetHalfWidth, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {1} or {0},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {0, -streetHalfWidth - halfDistance, 0},
                        {streetHalfWidth, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionTwo == 0 and {1} or {0},
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {0, streetHalfWidth + halfDistance, 0},
                        {streetHalfWidth, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionThree == 0 and {1} or {0},
                    snapNodes = params.directionThree == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionFour,
                        pitch,
                        {0, streetThreeHalfWidth + threeHalfDistance, 0},
                        {streetHalfWidth, streetThreeHalfWidth + threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionFour == 0 and {1} or {0},
                    snapNodes = params.directionFour == 0 and {1} or {0}
                }
            }
        end
        return edgeLists
    end

    local function _getSnapAndFreeEdgeLists(params, pitch, streetData, streetType, tramTrackType)
        local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
        local streetFullWidth = streetData.sidewalkWidth + streetData.sidewalkWidth + streetData.streetWidth
        local streetThreeHalfWidth = 3.0 * streetHalfWidth
        local xMax = math.max(8.0, streetHalfWidth + 1.0) -- this is the fruit of trial and error, see the notes
        local halfDistance = params.distance / 2.0
        local distance = params.distance
        local threeHalfDistance = 3.0 * halfDistance

        local edgeLists
        if params.howManyStreetsBase0 == 0 then -- 1 street
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {-xMax, 0, 0}, {0, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    -- edgeType = "BRIDGE",
                    -- edgeTypeName = "cement.lua",
                    -- collider = {
                    --     type = 'NONE'
                    -- },
                    -- autoRemovable = true,
                    --skipCollision = true, --useless
                    --skipCollisionCheck = true, --useless
                    -- nodes that stick out of the construction. 
                    -- LOLLO NOTE If all nodes are free, they can be upgraded with tram, bus lane, one-way once built,
                    -- and clicking on the construction won't bring up the construction menu anymore.
                    -- This allows a simple parameter menu coz the properties can be changed with the stock street menus.
                    -- In general, it's easier to build and then change a construction.
                    freeNodes = {0, 1},
                    -- nodes allowed to snap to other edges of the same type
                    -- LOLLO NOTE if the nodes are too close (ie the edges too short), the game will crash with
                    -- c:\build\tpf2_steam\src\lib\geometry\streets\transitions\transition_util.cpp:125: 
                    -- float __cdecl StreetGeometry::TransitionUtil::CompCurveHandleDistance(float,float): 
                    -- Assertion `angle >= .0f && angle <= Math::PI' failed.
                    --
                    -- Experiments show that two edges one after the other allow for a shorter crashless construction than one edge only,
                    -- and all nodes being free calls for some extra length,
                    -- while if only the outer nodes are free we can get away with a shorter construction.
                    snapNodes = params.directionOne == 0 and {0} or {1}
                    --					snapNodes = { 0, 1 },  -- node 0 and 1 are allowed to snap to other edges of the same type --crashes
                    --					tag2nodes = {},
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {0, 0, 0}, {xMax, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = {0, 1},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                }
            }
        elseif params.howManyStreetsBase0 == 1 then -- 2 streets
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-xMax, -streetHalfWidth - halfDistance, 0},
                        {0, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-xMax, streetHalfWidth + halfDistance, 0},
                        {0, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {0, -streetHalfWidth - halfDistance, 0},
                        {xMax, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {0, streetHalfWidth + halfDistance, 0},
                        {xMax, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                }
            }
        elseif params.howManyStreetsBase0 == 2 then -- 3 streets
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-xMax, -streetFullWidth - distance, 0},
                        {0, -streetFullWidth - distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionTwo, pitch, {-xMax, 0, 0}, {0, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = {0, 1},
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {-xMax, streetFullWidth + distance, 0},
                        {0, streetFullWidth + distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionThree == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {0, -streetFullWidth - distance, 0},
                        {xMax, -streetFullWidth - distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionTwo, pitch, {0, 0, 0}, {xMax, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = {0, 1},
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {0, streetFullWidth + distance, 0},
                        {xMax, streetFullWidth + distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionThree == 0 and {1} or {0}
                }
            }
        else --if params.howManyStreetsBase0 == 3 then -- 4 streets -- always provide a fallback just in case
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-xMax, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {0, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-xMax, -streetHalfWidth - halfDistance, 0},
                        {0, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {-xMax, streetHalfWidth + halfDistance, 0},
                        {0, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionThree == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionFour,
                        pitch,
                        {-xMax, streetThreeHalfWidth + threeHalfDistance, 0},
                        {0, streetThreeHalfWidth + threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionFour == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {0, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {xMax, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {0, -streetHalfWidth - halfDistance, 0},
                        {xMax, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {0, streetHalfWidth + halfDistance, 0},
                        {xMax, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionThree == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionFour,
                        pitch,
                        {0, streetThreeHalfWidth + threeHalfDistance, 0},
                        {xMax, streetThreeHalfWidth + threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = params.directionFour == 0 and {1} or {0}
                }
            }
        end
        return edgeLists
    end

    local function _getSnapAndFreeAndSimpleEdgeLists_tooLong(params, pitch, streetData, streetType, tramTrackType)
        local extraLength4SnappingBase = 1.5
        local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth / 2.0
        local streetFullWidth = streetData.sidewalkWidth + streetData.sidewalkWidth + streetData.streetWidth
        local streetThreeHalfWidth = 3.0 * streetHalfWidth
        local extraLength4Snapping = streetHalfWidth + streetHalfWidth + extraLength4SnappingBase
        local halfDistance = params.distance / 2.0
        local distance = params.distance
        local threeHalfDistance = 3.0 * halfDistance

        local edgeLists
        if params.howManyStreetsBase0 == 0 then -- 1 street
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {-streetHalfWidth - extraLength4Snapping, 0, 0}, {0, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    -- edgeType = "BRIDGE",
                    -- edgeTypeName = "cement.lua",
                    -- collider = {
                    --     type = 'NONE'
                    -- },
                    -- autoRemovable = true,
                    --skipCollision = true, --useless
                    --skipCollisionCheck = true, --useless
                    -- nodes that stick out of the construction
                    freeNodes = params.directionOne == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    -- nodes allowed to snap to other edges of the same type
                    snapNodes = params.directionOne == 0 and {0} or {1}
                    --					snapNodes = { 0, 1 },  -- node 0 and 1 are allowed to snap to other edges of the same type --crashes
                    --					tag2nodes = {},
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionOne, pitch, {0, 0, 0}, {streetHalfWidth + extraLength4Snapping, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionOne == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionOne == 0 and {1} or {0}
                }
            }
        elseif params.howManyStreetsBase0 == 1 then -- 2 streets
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, -streetHalfWidth - halfDistance, 0},
                        {streetHalfWidth + extraLength4Snapping, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {0, 1},
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, streetHalfWidth + halfDistance, 0},
                        {streetHalfWidth + extraLength4Snapping, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = {0, 1},
                    snapNodes = {0, 1},
                },
            }
        elseif params.howManyStreetsBase0 == 2 then -- 3 streets
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, -streetFullWidth - distance, 0},
                        {0, -streetFullWidth - distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionTwo, pitch, {-streetHalfWidth - extraLength4Snapping, 0, 0}, {0, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionTwo == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, streetFullWidth + distance, 0},
                        {0, streetFullWidth + distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionThree == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionThree == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {0, -streetFullWidth - distance, 0},
                        {streetHalfWidth + extraLength4Snapping, -streetFullWidth - distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(params.directionTwo, pitch, {0, 0, 0}, {streetHalfWidth + extraLength4Snapping, 0, 0}, {1, 0, 0}, {1, 0, 0}),
                    freeNodes = params.directionTwo == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {0, streetFullWidth + distance, 0},
                        {streetHalfWidth + extraLength4Snapping, streetFullWidth + distance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionThree == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionThree == 0 and {1} or {0}
                }
            }
        else --if params.howManyStreetsBase0 == 3 then -- 4 streets -- always provide a fallback just in case
            edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {0, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionOne == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, -streetHalfWidth - halfDistance, 0},
                        {0, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionTwo == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionTwo == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, streetHalfWidth + halfDistance, 0},
                        {0, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionThree == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionThree == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionFour,
                        pitch,
                        {-streetHalfWidth - extraLength4Snapping, streetThreeHalfWidth + threeHalfDistance, 0},
                        {0, streetThreeHalfWidth + threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionFour == 0 and {0} or {1},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionFour == 0 and {0} or {1}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionOne,
                        pitch,
                        {0, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {streetHalfWidth + extraLength4Snapping, -streetThreeHalfWidth - threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionOne == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionOne == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionTwo,
                        pitch,
                        {0, -streetHalfWidth - halfDistance, 0},
                        {streetHalfWidth + extraLength4Snapping, -streetHalfWidth - halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionTwo == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionTwo == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionThree,
                        pitch,
                        {0, streetHalfWidth + halfDistance, 0},
                        {streetHalfWidth + extraLength4Snapping, streetHalfWidth + halfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionThree == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionThree == 0 and {1} or {0}
                },
                {
                    type = 'STREET',
                    params = {
                        skipCollision = true,
                        type = streetType,
                        tramTrackType = tramTrackType
                    },
                    edges = parallelStreetHelper.makeEdges(
                        params.directionFour,
                        pitch,
                        {0, streetThreeHalfWidth + threeHalfDistance, 0},
                        {streetHalfWidth + extraLength4Snapping, streetThreeHalfWidth + threeHalfDistance, 0},
                        {1, 0, 0},
                        {1, 0, 0}
                    ),
                    freeNodes = params.directionFour == 0 and {1} or {0},
                    freeNodes = {0, 1}, -- LOLLO TODO experiment
                    snapNodes = params.directionFour == 0 and {1} or {0}
                }
            }
        end
        return edgeLists
    end

    parallelStreetHelper.setGlobalStreetData(game, _parallelisedStreetTypes)

    return {
        type = 'STREET_CONSTRUCTION',
        description = {
            name = _('Parallel streets'),
            description = _('Lays parallel chunks of street.')
        },
        availability = {
            yearFrom = 1925,
            yearTo = 0
        },
        params = {
            {
                key = 'streetType_',
                name = _('Street type'),
                --values = {_('Narrow pavement'), _('Medium pavement')},
                values = arrayUtils.map(
                    game._lolloStreetData,
                    function(str)
                        return str.name
                    end
                ),
                defaultIndex = 0
                -- yearFrom = 1925,
                -- yearTo = 0
            },
            {
                key = 'howManyStreetsBase0',
                name = _('Number of streets'),
                values = {_('1'), _('2'), _('3'), _('4')},
                defaultIndex = 1
                -- yearFrom = 1925,
                -- yearTo = 0
            },
            {
                key = 'distance',
                name = _('Distance'),
                -- values = {_('0m'), _('1m'), _('2m'), _('3m'), _('4m')},
                values = arrayUtils.map(
                    parallelStreetHelper.getDistances(),
                    function(dis)
                        return tostring(dis) .. 'm'
                    end
                ),
                defaultIndex = 0
            },
            {
                key = 'directionOne',
                name = _('Direction 1'),
                values = {
                    _('↑'),
                    _('↓')
                },
                defaultIndex = 0
            },
            {
                key = 'directionTwo',
                name = _('Direction 2'),
                values = {
                    _('↑'),
                    _('↓')
                },
                defaultIndex = 0
            },
            {
                key = 'directionThree',
                name = _('Direction 3'),
                values = {
                    _('↑'),
                    _('↓')
                },
                defaultIndex = 0
            },
            {
                key = 'directionFour',
                name = _('Direction 4'),
                values = {
                    _('↑'),
                    _('↓')
                },
                defaultIndex = 0
            },
            {
                key = 'tramTrack',
                name = _('Tram track type'),
                values = {
                    -- must be in this sequence
                    _('NO'),
                    _('YES'),
                    _('ELECTRIC')
                },
                defaultIndex = 2
            },
            {
                key = 'snapNodes',
                name = _('Snap to neighbours'),
                values = {
                    _('No'),
                    _('Yes')
                },
                defaultIndex = 0
            },
            {
                key = 'pitch',
                name = _('Pitch (you can adjust it with arrow keys)'),
                values = pitchUtil.getPitchParamValues(),
                defaultIndex = pitchUtil.getDefaultPitchParamValue(),
                uiType = 'SLIDER'
            }
        },
        order = 1240,
        -- collider = {
        --     type = 'NONE'
        -- },
        -- autoRemovable = true,
        skipCollision = true,
        --skipCollisionCheck = true,
        updateFn = function(params)
            local pitch = params.pitch - pitchUtil.getMiddlePitchParamValue()

            local streetData = game._lolloStreetData[params.streetType_ + 1]
            local streetType = streetData.type

            -- print('LOLLO parallel streets updateFn')
            -- dump(true)(params)

            local result = {}
            result.cost = 0
            result.groundFaces = {}
            -- result.colliders = {}
            -- LOLLO NOTE I need a dummy model, so the game stops saying "hello there" or other rubbish,
            -- then pointing away,
            -- when the user clicks on a done construction to configure it.
            -- LOLLO TODO see if you can get rid of it, once all nodes are free
            result.models = {
                {
                    id = 'lollo_assets/lollo_dummy.mdl',
                    skipCollision = true,
                    -- skipCollisionCheck = true,
                    -- transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
                    transf = pitchUtil.getIdTransfPitched(pitch)
                }
            }

            local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
            if params.snapNodes == 0 then
                result.edgeLists = _getNonSnapEdgeLists(params, pitch, streetData, streetType, tramTrackType)
            else
                -- LOLLO NOTE we have 2 half edges for every chunk of road. The inner nodes are not free and do not snap, the outer ones do.
                -- This is required if we want to make them snappable.
                result.edgeLists = _getSnapAndFreeEdgeLists(params, pitch, streetData, streetType, tramTrackType)
            end

            return result
        end,
        upgradeFn = function(params)
            -- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
            -- If you leave it out, adding and removing tram tracks won't work.
            -- (Bus lanes don't work anyway.)
            -- print('LOLLO streets merging upgradeFn')
            -- dump(true)(params)
            return {}
        end
    }
end
