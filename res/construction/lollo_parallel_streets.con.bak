local dump = require 'luadump'
local inspect = require('inspect')
local vec3 = require 'vec3'
local transf = require 'transf'
local fileUtils = require('fileUtils')

function data()
    --local test = require('lollo_medium_1_way_1_lane_street.lua')
    local function readFiles(files)
        print('LOLLO current path = ')
        dump(true)(fileUtils.getCurrentPath())
        -- this works, but it returns a file that returns nothing, coz street files are structured this way
        local file, err = loadfile('C:/Program Files (x86)/Steam/userdata/71590188/1066780/local/staging_area/lollo_street_tuning_1/res/config/street/lollo_medium_1_way_1_lane_street.lua')
        print('LOLLO err = ', err)
        print(inspect(file)) -- a function
        print(inspect(file())) -- nil. Note that street files do not return anything.

        local readFileResultSuccess, readFileResult =
            fileUtils.readGameDataFile('C:/Program Files (x86)/Steam/userdata/71590188/1066780/local/staging_area/lollo_street_tuning_1/res/config/street/lollo_medium_1_way_1_lane_street.lua')
        print('LOLLO readFileResultSuccess = ')
        dump(true)(readFileResultSuccess) -- this fails coz readFileResult is boolean
        print('LOLLO readFileResult = ')
        dump(true)(readFileResult)
        print('LOLLO package paths = ')
        dump(true)(fileUtils.getPackagePaths())
        --print('LOLLO package.loaded = ')
        --dump(true)(package.loaded) huge
        local a, b, c = package.loaders
        print('LOLLO package.loaders = ')
        dump(true)(a) -- returns true
        dump(true)(b) -- returns true
        dump(true)(c) -- returns true

        local a, b, c = package.preload
        print('LOLLO package.preload = ')
        dump(true)(a) -- returns true
        dump(true)(b) -- returns true
        dump(true)(c) -- returns true

        print('LOLLO _G = ')
        for key, value in pairs(_G) do
            print(key, value)
        end

        -- this fails coz game.interface is not on this thread
        -- local func = function()
        --     return game.interface.findPath('lollo_medium_4_lane_street')
        -- end
        -- local ok, fc = pcall(func)
        -- if ok then
        --     print('LOLLO test 4 findPath succeeded')
        --     dump(true)(fc)
        --     dump(true)(fc())
        -- else
        --     print('Execution error:', fc)
        -- end

        -- You can change package.path (not with ?.lua but with the whole file name) and then require a street file,
        -- but the required file does not return anything,
        -- because this is how street files are designed. So I need to read the file and parse it somehow.
        -- local modPath
        -- if string.ends(info.source, 'mod.lua') then
        --     modPath = string.gsub(info.source, "@(.*/)mod[.]lua", "%1")
        -- elseif string.ends(info.source, '.mdl') then
        --     modPath = string.gsub(info.source, "@(.*/)res/models/model/.+[.]mdl", "%1")
        -- elseif string.ends(info.source, '.lua') then
        --     modPath = string.gsub(info.source, "@(.*/)res/config/street/.+[.]lua", "%1")
        -- end
    end

    readFiles({})

    return {
        type = 'STREET_CONSTRUCTION',
        description = {
            name = _('Parallel streets'),
            description = _('Lays two parallel streets.')
        },
        availability = {
            yearFrom = 0,
            yearTo = 0
        },
        -- params = { -- LOLLO here, you can add some parameters, such as the street type
        --     {
        --         key = "streetType2",
        --         name = _("Number of lanes"),
        --         values = { _("2"), _("3") },
        --         defaultIndex = 0,
        --         yearFrom = 1960,
        --         yearTo = 0
        --     },
        --     {
        --         key = "scale",
        --         name = _("Scale"),
        --         values = { _("Small"), _("Medium"), _("Large") },
        --         defaultIndex = 0,
        --         yearFrom = 1960,
        --         yearTo = 0
        --     },
        -- },

        order = 1,
        -- collider = {
        --     type = 'NONE'
        -- },
        -- autoRemovable = true,
        --skipCollision = true,
        --skipCollisionCheck = true,
        updateFn = function(params)
            print('LOLLO parallel streets updateFn')
            -- dump(true)(params)

            local result = {}
            --result.colliders = {}
            result.cost = 0
            --result.edgeLists = {}
            result.models = {}
            result.groundFaces = {}
            --		result.h0 = {}
            --		result.h1 = {}
            -- result.collider = {
            --     type = 'NONE'
            -- }
            -- result.autoRemovable = true
            -- result.skipCollision = true
            -- result.skipCollisionCheck = true
            --		result.stations = {}
            --		result.terminalGroups = {}
            --		result.terrainAlignmentLists = {}
            -- result.terrainAlignmentLists = {
            --     {
            --         type = 'EQUAL',
            --         faces = {}
            --     }
            -- }
            -- result.models = {
            --     {
            --         --id = "asset/icon/marker_exclamation.mdl",
            --         --id = "asset/icon/mark.mdl",
            --         --id = "station/street/mark.mdl",
            --         id = 'lollo_assets/mark.mdl',
            --         collider = {
            --             type = 'NONE'
            --         },
            --         autoRemovable = true,
            --         skipCollision = true,
            --         skipCollisionCheck = true,
            --         transf = transf.transl(vec3.new(0.0, 0.0, .0))
            --     }
            -- }

            result.edgeLists = {
                {
                    type = 'STREET',
                    params = {
                        -- collider = {
                        --     type = 'NONE'
                        -- },
                        -- autoRemovable = true,
                        -- skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = 'lollo_medium_1_way_1_lane_street.lua' -- from res/config/street/
                        -- tramTrackType = 'NO'
                    },
                    edges = {
                        -- one entry refers to a position and a tangent
                        {{-4, -4, .0}, {1, .0, .0}}, -- node 0
                        {{4, -4, .0}, {1, .0, .0}} -- node 1
                    },
                    -- edgeType = "BRIDGE",
                    -- edgeTypeName = "cement.lua",
                    freeNodes = {0, 1},
                    --freeNodes = { 1 },
                    -- freeNodes = {},
                    -- collider = {
                    --     type = 'NONE'
                    -- },
                    -- autoRemovable = true,
                    --skipCollision = true, --useless
                    --skipCollisionCheck = true, --useless
                    --					snapNodes = { 0 },  -- node 0 is allowed to snap to other edges of the same type --crashes
                    snapNodes = {0, 1}, -- node 1 is allowed to snap to other edges of the same type
                    snapNodes = {0},
                    snapNodes = {}
                    --					snapNodes = { 0, 1 },  -- node 0 and 1 are allowed to snap to other edges of the same type --crashes
                    --					tag2nodes = {},
                },
                {
                    type = 'STREET',
                    params = {
                        -- collider = {
                        --     type = 'NONE'
                        -- },
                        -- autoRemovable = true,
                        -- skipCollision = true,
                        -- skipCollisionCheck = true,
                        type = 'lollo_medium_1_way_1_lane_street.lua' -- from res/config/street/
                        -- tramTrackType = 'NO'
                    },
                    edges = {
                        -- one entry refers to a position and a tangent
                        {{-4, 4, .0}, {1, .0, .0}}, -- node 0
                        {{4, 4, .0}, {1, .0, .0}} -- node 1
                    },
                    -- edgeType = "BRIDGE",
                    -- edgeTypeName = "cement.lua",
                    freeNodes = {0, 1},
                    --freeNodes = { 1 },
                    --freeNodes = { },
                    -- collider = {
                    --     type = 'NONE'
                    -- },
                    -- autoRemovable = true,
                    --skipCollision = true, --useless
                    --skipCollisionCheck = true, --useless
                    snapNodes = {0, 1}, -- node 1 is allowed to snap to other edges of the same type
                    snapNodes = {0},
                    snapNodes = {}
                    --					tag2nodes = {},
                }
            }

            return result
        end,
        upgradeFn = function(params)
            -- print('LOLLO parallel streets upgradeFn')
            -- dump(true)(params)
        end
    }
end
