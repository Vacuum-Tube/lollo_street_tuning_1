-- local luadump = require('lollo_street_tuning/luadump')
-- local inspect = require('inspect')
local arrayUtils = require('lollo_street_tuning/lolloArrayUtils')
local streetUtils = require('lollo_street_tuning/lolloStreetUtils')
local streetChunksHelper = require('lollo_street_tuning/lolloStreetChunksHelper')
local streetUtil = require('streetutil')
local vec3 = require('vec3')
local pitchUtil = require('lollo_street_tuning/lolloPitchHelpers')

function data()
    local function _getStreetHalfWidth(streetData)
        return streetData.sidewalkWidth + streetData.streetWidth * 0.5
    end

    local function _getWidthFactor(streetHalfWidth)
        -- this is the fruit of trial and error. In May 2020, the game does not allow really sharp curves.
        local result = 0.0
        if streetHalfWidth <= 2.01 then
            -- print('LOLLO very narrow')
            result = 1.60
        elseif streetHalfWidth <= 4.01 then
            -- print('LOLLO narrow')
            result = 1.32
        elseif streetHalfWidth <= 4.51 then
            -- print('LOLLO medium')
            result = 1.30
        else
            -- print('LOLLO wide')
            result = 1.20
        end
        return result
    end

    local function _getSnapEdgeLists(params, pitchAdjusted, streetData, tramTrackType)
        local streetHalfWidth = _getStreetHalfWidth(streetData)
        local widthFactorBend = _getWidthFactor(streetHalfWidth)

        -- this is the fruit of trial and error, see the notes
        -- local xMax = math.max(9.0, streetHalfWidth + 1.0)
        local xMax = streetHalfWidth + 1.0 -- LOLLO TODO check this, it might need extending
        local edgeParams = {
            skipCollision = true,
            type = streetData.fileName,
            tramTrackType = tramTrackType
        }
        local edgeLists = {
            {
                type = 'STREET',
                params = edgeParams,
                edges = streetChunksHelper.makeEdges(
                    params.direction,
                    pitchAdjusted,
                    {-xMax, -widthFactorBend * streetHalfWidth, 0},
                    {0, -widthFactorBend * streetHalfWidth, 0},
                    false,
                    {xMax, 0, 0},
                    {xMax, 0, 0}
                ),
                freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                snapNodes = streetChunksHelper.getSnapNodesLowX(params)
            },
            {
                type = 'STREET',
                params = edgeParams,
                edges = {},
                freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                snapNodes = streetChunksHelper.getSnapNodesCentre(params),
            },
            {
                type = 'STREET',
                params = edgeParams,
                edges = streetChunksHelper.makeEdges(
                    params.direction,
                    pitchAdjusted,
                    {0, widthFactorBend * streetHalfWidth, 0},
                    {-xMax, widthFactorBend * streetHalfWidth, 0},
                    false,
                    {-xMax, 0, 0},
                    {-xMax, 0, 0}
                ),
                freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                snapNodes = streetChunksHelper.getSnapNodesHighX(params)
            }
        }
        -- the pitch plays no part in the bend as long as it is centred on x = 0
        if params.direction == 0 then
            streetUtil.addEdgeAutoTangents(
                edgeLists[2].edges,
                vec3.new(0, -widthFactorBend * streetHalfWidth, 0),
                vec3.new(0, widthFactorBend * streetHalfWidth, 0),
                vec3.new(1, 0, 0),
                vec3.new(-1, 0, 0)
            )
        else
            streetUtil.addEdgeAutoTangents(
                edgeLists[2].edges,
                vec3.new(0, widthFactorBend * streetHalfWidth, 0),
                vec3.new(0, -widthFactorBend * streetHalfWidth, 0),
                vec3.new(1, 0, 0),
                vec3.new(-1, 0, 0)
            )
        end
        return edgeLists
    end

    local defaultStreetTypeIndex = arrayUtils.findIndex(streetUtils.getGlobalStreetData(), 'fileName', 'lollo_medium_1_way_1_lane_street.lua') - 1
    if defaultStreetTypeIndex < 0 then defaultStreetTypeIndex = 0 end

    return {
        type = 'STREET_CONSTRUCTION',
        description = {
            name = _('Street hairpin curves'),
            description = _('Lays streets as tightly bent as the game allows. Use O and P to adjust the pitch.')
        },
        availability = {
            yearFrom = 1925,
            yearTo = 0
        },
        params = {
            {
                key = 'streetType_',
                name = _('Street type'),
                values = arrayUtils.map(
                    streetUtils.getGlobalStreetData(),
                    function(str)
                        return str.name
                    end
                ),
                uiType = 'COMBOBOX',
                defaultIndex = defaultStreetTypeIndex
                -- yearFrom = 1925,
                -- yearTo = 0
            },
            {
                key = 'snapNodes',
                name = _('Snap to neighbours'),
                values = {
                    _('No'),
                    _('Yes')
                },
                defaultIndex = 0
            },
            {
                key = 'lockLayoutCentre',
                name = _('Lock curve'),
                tooltip = _('Lock a curve to keep its shape pretty and prevent other roads merging in. Unlock it to treat it like ordinary roads. You cannot relock an unlocked curve.'),
                values = {
                    _('No'),
                    _('Yes')
                },
                defaultIndex = 0
            },
            {
                key = 'direction',
                name = _('Direction'),
                values = {
                    _('↑'),
                    _('↓')
                },
                defaultIndex = 0
            },
            {
                key = 'tramTrack',
                name = _('Tram track type'),
                values = {
                    -- must be in this sequence
                    _('NO'),
                    _('YES'),
                    _('ELECTRIC')
                },
                defaultIndex = 2
            },
            {
                key = 'pitch',
                name = _('Pitch (adjust it with O and P while building)'),
                values = pitchUtil.getPitchParamValues(),
                defaultIndex = pitchUtil.getDefaultPitchParamValue(),
                uiType = 'SLIDER'
            }
        },
        order = 1242,
        skipCollision = true,
        updateFn = function(params)
            local pitchAdjusted = pitchUtil.adjustParamsPitch(params)
            local streetData = streetUtils.getGlobalStreetData()[params.streetType_ + 1]

            local result = { cost = 0 }
            result.groundFaces = {}
            -- result.colliders = {}
            -- LOLLO NOTE If some edges are not free, I will need a dummy model,
            -- otherwise the game will say "hello there" or "easter egg" or other rubbish,
            -- then point away (to some animal) and do nothing,
            -- when the user clicks on a done construction to configure it.
            result.models = {
                {
                    id = 'lollo_assets/lollo_dummy.mdl',
                    skipCollision = true,
                    transf = pitchUtil.getIdTransfPitched(params.pitch)
                }
            }

            -- LOLLO NOTE I cannot use KEEP here
            local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
            -- LOLLO NOTE we have 3 edges for every hairpin bend. The inner nodes do not snap, the outer ones do.
            -- This is required if we want to make them snappable at all and avoid crashes.
            -- The 2 outer nodes are always free, otherwise the curve cannot join the other streets.
            -- If I make the 4 inner nodes free, the curve will become a street like all the others once plopped:
            -- I can upgrade them later with common street tools,
            -- I can join other streets into the curve
            -- clicking the bend won't bring up the construction menu (once plopped).
            -- Otherwise, the construction will stay isolated from the rest,
            -- and clicking it will bring up the params menu.
            result.edgeLists = _getSnapEdgeLists(params, pitchAdjusted, streetData, tramTrackType)

            return result
        end,
        upgradeFn = function(params)
            -- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
            -- If you leave it out, adding and removing tram tracks won't work.
            -- (Bus lanes don't work anyway.)
            return {}
        end
    }
end
