-- local laneutil = require('laneutil')
local edgeUtils = require('lollo_street_tuning.edgeUtils')
local pitchHelper = require('lollo_street_tuning/pitchHelper')
-- local transf = require 'transf'
-- LOLLO TODO see if you can ease the pain when reconfiguring an existing merger. maybe skip collisions? It is not enough.
local function _getGroundFaces(face)
    return {
        {
            face = face,
            modes = {
                {
                    type = 'FILL',
                    key = 'asphalt_like_street.lua', -- 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                }
            }
        },
        {
            face = face,
            modes = {
                {
                    type = 'STROKE_OUTER',
                    key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                }
            }
        },
    }
end

local function _getHasBus(params)
    return params.hasBus == 1
end

local function _getTramTrackType(params)
    return params.tramTrack == 0 and "NO" or params.tramTrack == 1 and "YES" or "ELECTRIC"
    -- return params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
end

local function _makeEdges(pitchAngle, params, node0, node1, tan0, tan1)
    if tan0 == nil or tan1 == nil then
        local edgeLength = edgeUtils.getVectorLength({node1[1] - node0[1], node1[2] - node0[2], node1[3] - node0[3]})
        if tan0 == nil then tan0 = {edgeLength, 0, 0} end
        if tan1 == nil then tan1 = {edgeLength, 0, 0} end
    end

    return params.direction == 0 and
        {
            pitchHelper.getPosTanPitched(pitchAngle, node0, tan0), -- node 0
            pitchHelper.getPosTanPitched(pitchAngle, node1, tan1) -- node 1
        } or
        {
            pitchHelper.getPosTanPitched(pitchAngle, node1, {-tan1[1], -tan1[2], -tan1[3]}), -- node 0
            pitchHelper.getPosTanPitched(pitchAngle, node0, {-tan0[1], -tan0[2], -tan0[3]}) -- node 1
        }
end

local function updateFn_2_1_lane_narrow_sidewalk_to_2_lane_one_way(params)
    local result = { cost = 0, skipCollision = true, }
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 6.0, 0.0, 1.0},
        {-2, -6.0, 0.0, 1.0},
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    -- LOLLO NOTE hasBus has no effect, neither do hasBusLane, busLane or hasBus, with true or false
    -- local busLaneType = params.busLane and (({'NO', 'YES'})[params.busLane + 1]) or 'NO'
    local tramTrackType = _getTramTrackType(params)
    local hasBus = _getHasBus(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                -- busLaneType = busLaneType, -- does not pull, neither do hasBusLane and busLane, with true or false
                hasBus = hasBus,
                skipCollision = true,
                --skipCollisionCheck = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -2, .0}, {-2, -2, .0}),
            -- edgeType = "BRIDGE", "TUNNEL"
            -- edgeTypeName = "cement.lua",
            --freeNodes = { 0, 1 },
            --freeNodes = { 1 },
            -- freeNodes = {},
            freeNodes = params.direction == 0 and {0} or {1},
            --snapNodes = {1}, -- node 1 is allowed to snap to other edges of the same type
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
            --					tag2nodes = {},
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, 2, 0}, {-2, 2, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, 2, 0}, {1.8, 2, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/town_medium_one_way_new.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {6, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_2_1_lane_narrow_sidewalk_to_2_lane(params)
    local _pitchAngle = pitchHelper.getPitchAngle(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 6.0, 0.0, 1.0},
        {-2, -6.0, 0.0, 1.0},
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_narrow_sidewalk_allow_reversal.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -2, .0}, {-2, -2, .0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 2, 0}, {-4, 2, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 2, 0}, {-1.8, 2, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        -- the reversal edge is too tight for streets, so we make a reversal lane in the model instead
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'standard/town_medium_new.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {6, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_2_1_lane_medium_sidewalk_to_2_lane_one_way(params)
    local result = { cost = 0, skipCollision = true, }
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 8.0, 0.0, 1.0},
        {-2, -8.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_medium_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -4, 0}, {-2, -4, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, 4, 0}, {-2, 4, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, 4, 0}, {1.8, 3, 0}, {4, -0.1, 0}, {4, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -4, 0}, {1.8, -3, 0}, {4, 0.1, 0}, {4, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_2_lane_medium_sidewalk_street.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_medium_sidewalk_street.lua',
                tramTrackType = tramTrackType
            },
            -- this could be shortened to x = 2 to x = 6, but it dumps with no messages
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {8, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_2_1_lane_medium_sidewalk_to_2_lane(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 8.0, 0.0, 1.0},
        {-2, -8.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_medium_sidewalk_allow_reversal.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -4, 0}, {-2, -4, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 4, 0}, {-4, 4, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -4, 0}, {1.8, -3, 0}, {4, 0.1, 0}, {4, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 3, 0}, {-1.8, 4, 0}, {-4, 0.1, 0}, {-4, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        -- the reversal edge is too tight for streets, so we make a reversal lane in the model instead
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_2_lane_medium_sidewalk_street.lua',
                tramTrackType = tramTrackType
            },
            -- this could be shortened to x = 2 to x = 6, but it dumps with no messages
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {8, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_3_1_lane_narrow_sidewalk_to_3_lane_one_way(params)
    local result = { cost = 0, skipCollision = true, }
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 8.0, 0.0, 1.0},
        {-2, -8.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_3_lanes_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -4, 0}, {-2, -4, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, 4, 0}, {-2, 4, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, 4, 0}, {1.8, 4, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, 0, 0}, {1.8, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -4, 0}, {1.8, -4, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_3_lane_street.lua' or 'lollo_medium_1_way_3_lane_3_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {6, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_3_1_lane_medium_sidewalk_to_3_lane_one_way(params)
    local result = { cost = 0, skipCollision = true, }
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local connectorFace = {
        {2, -12.0, 0.0, 1.0},
        {2, 12.0, 0.0, 1.0},
        {-10, 12.0, 0.0, 1.0},
        {-10, -12.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {6.0, 12.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_3_lanes_medium_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, -8, 0}, {-6, -8, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, 0, 0}, {-6, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, 8, 0}, {-6, 8, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, 8, 0}, {1.8, 4, 0}, {8, -0.1, 0}, {8, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, 0, 0}, {1.8, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, -8, 0}, {1.8, -4, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_3_lane_street.lua' or 'lollo_medium_1_way_3_lane_3_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            -- this could be shortened to x = 2 to x = 6, but it dumps with no messages
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {8, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_4_1_lane_narrow_sidewalk_to_4_lane_one_way(params)
    local result = { cost = 0, skipCollision = true, }
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-6, 8.0, 0.0, 1.0},
        {-6, -8.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {4, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_4_lanes_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, -6, 0}, {-6, -6, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, -2, 0}, {-6, -2, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, 2, 0}, {-6, 2, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, 6, 0}, {-6, 6, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, 6, 0}, {1.8, 4.5, 0}, {8, -0.1, 0}, {8, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, 2, 0}, {1.8, 1.5, 0}, {8, -0.1, 0}, {8, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, -2, 0}, {1.8, -1.5, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, -6, 0}, {1.8, -4.5, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_4_lane_street.lua' or 'lollo_medium_1_way_4_lane_4_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            -- this could be shortened to x = 2 to x = 6, but it dumps with no messages
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {8, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_4_1_lane_narrow_sidewalk_to_4_lane(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-6, 8.0, 0.0, 1.0},
        {-6, -8.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {4, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_4_lanes_narrow_sidewalk_allow_reversal.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, -6, 0}, {-6, -6, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-8, -2, 0}, {-6, -2, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-6, 2, 0}, {-8, 2, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-6, 6, 0}, {-8, 6, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },

        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, -6, 0}, {1.8, -4.5, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-5.8, -2, 0}, {1.8, -1.5, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 1.5, 0}, {-5.8, 2, 0}, {-8, 0.1, 0}, {-8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 4.5, 0}, {-5.8, 6, 0}, {-8, 0.1, 0}, {-8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },

        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_4_lane_street.lua' or 'lollo_medium_4_lane_4_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            -- this could be shortened to x = 2 to x = 6, but it dumps with no messages
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {8, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }
-- debugPrint(result)
    return result
end

local function updateFn_4_1_lane_narrow_sidewalk_to_4_lane_large(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -12.0, 0.0, 1.0},
        {2, 12.0, 0.0, 1.0},
        {-2, 8.0, 0.0, 1.0},
        {-2, -8.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 12.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_4_lanes_large_street_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -6, 0}, {-2, -6, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -2, 0}, {-2, -2, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 2, 0}, {-4, 2, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 6, 0}, {-4, 6, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -6, 0}, {1.8, -6, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 2, 0}, {-1.8, 2, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 6, 0}, {-1.8, 6, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/town_large_new.lua' or 'lollo_large_4_lane_4_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {8, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_2_2_lane_one_way_to_6_lane_x_large(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -16.0, 0.0, 1.0},
        {2, 16.0, 0.0, 1.0},
        {-2, 16.0, 0.0, 1.0},
        {-2, -16.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 16.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_6_lanes_x_large_street.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/town_medium_one_way_new.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-6, -8, 0}, {-2, -8, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/town_medium_one_way_new.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 8, 0}, {-6, 8, 0}, {-4, 0, 0}, {-4, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -10, 0}, {1.8, -10, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -6, 0}, {1.8, -6, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        -- cannot connect the inner lanes
        -- {
        --     type = 'STREET',
        --     params = {
        --         skipCollision = true,
        --         type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
        --         tramTrackType = tramTrackType
        --     },
        --     edges = _makeEdges(_pitchAngle, params, {-1.8, -6, 0}, {1.8, -2, 0}, {4, 0.1, 0}, {4, 0.1, 0}),
        --     freeNodes = {},
        --     snapNodes = {}
        -- },
        -- {
        --     type = 'STREET',
        --     params = {
        --         skipCollision = true,
        --         type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
        --         tramTrackType = tramTrackType
        --     },
        --     edges = _makeEdges(_pitchAngle, params, {1.8, 2, 0}, {-1.8, 6, 0}, {-4, 0.1, 0}, {-4, 0.1, 0}),
        --     freeNodes = {},
        --     snapNodes = {}
        -- },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 6, 0}, {-1.8, 6, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 10, 0}, {-1.8, 10, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/town_x_large_new.lua' or 'lollo_x_large_6_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {10, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_6_1_lane_one_way_to_6_lane_x_large(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -14.0, 0.0, 1.0},
        {2, 14.0, 0.0, 1.0},
        {-2, 12.0, 0.0, 1.0},
        {-2, -12.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 16.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_6_lanes_x_large_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -10, 0}, {-2, -10, 0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -6, 0}, {-2, -6, 0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -2, 0}, {-2, -2, 0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 2, 0}, {-4, 2, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 6, 0}, {-4, 6, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 10, 0}, {-4, 10, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -10, 0}, {1.8, -10, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -6, 0}, {1.8, -6, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 2, 0}, {-1.8, 2, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 6, 0}, {-1.8, 6, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 10, 0}, {-1.8, 10, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/town_x_large_new.lua' or 'lollo_x_large_6_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {10, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_Motorway_6_1_lane_one_way_to_6_lane_x_large(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -14.0, 0.0, 1.0},
        {2, 14.0, 0.0, 1.0},
        {-2, 12.0, 0.0, 1.0},
        {-2, -12.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 16.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_6_lanes_x_large_country_road_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -10, 0}, {-2, -10, 0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -6, 0}, {-2, -6, 0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -2, 0}, {-2, -2, 0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 2, 0}, {-4, 2, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 6, 0}, {-4, 6, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 10, 0}, {-4, 10, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -10, 0}, {1.8, -10, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -6, 0}, {1.8, -6, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 2, 0}, {-1.8, 2, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 6, 0}, {-1.8, 6, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 10, 0}, {-1.8, 10, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/country_x_large_new.lua' or 'lollo_x_large_6_tram_tracks_country_road.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {10, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_Motorway_2_2_lane_one_way_to_6_lane_x_large(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -12.0, 0.0, 1.0},
        {2, 12.0, 0.0, 1.0},
        {-2, 12.0, 0.0, 1.0},
        {-2, -12.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 16.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_6_lanes_x_large_country_road.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/country_medium_one_way_new.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_country_road.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-6, -8, 0}, {-2, -8, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/country_medium_one_way_new.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_country_road.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 8, 0}, {-6, 8, 0}, {-4, 0, 0}, {-4, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -10, 0}, {1.8, -10, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -6, 0}, {1.8, -6, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 6, 0}, {-1.8, 6, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 10, 0}, {-1.8, 10, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/country_x_large_new.lua' or 'lollo_x_large_6_tram_tracks_country_road.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {10, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_Motorway_4_1_lane_one_way_to_4_lane_large(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 6.0, 0.0, 1.0},
        {-2, -6.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 12.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_4_lanes_large_country_road_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-6, -6, 0}, {-2, -6, 0}, {4, 0, 0}, {4, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-6, -2, 0}, {-2, -2, 0}, {4, 0, 0}, {4, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 2, 0}, {-6, 2, 0}, {-4, 0, 0}, {-4, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 6, 0}, {-6, 6, 0}, {-4, 0, 0}, {-4, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -6, 0}, {1.8, -6, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}, {3.6, 0, 0}, {3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 2, 0}, {-1.8, 2, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 6, 0}, {-1.8, 6, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/country_large_new.lua' or 'lollo_large_4_lane_4_tram_tracks_country_road.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {10, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_Motorway_2_1_lane_narrow_sidewalk_to_2_lane(params)
    params.direction = 0 -- 2-way streets cannot be reversed, the game is like that
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local result = { cost = 0, skipCollision = true, }

    local connectorFace = {
        {2, -4.0, 0.0, 1.0},
        {2, 4.0, 0.0, 1.0},
        {-2, 4.0, 0.0, 1.0},
        {-2, -4.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 4.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_country_road_narrow_sidewalk_allow_reversal.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -2, .0}, {-2, -2, .0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-2, 2, 0}, {-4, 2, 0}, {-2, 0, 0}, {-2, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {1.8, 2, 0}, {-1.8, 2, 0}, {-3.6, 0, 0}, {-3.6, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        -- the reversal edge is too tight for streets, so we make a reversal lane in the model instead
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'standard/country_medium_new.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {6, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_Motorway_3_1_lane_narrow_sidewalk_to_3_lane_one_way(params)
    local result = { cost = 0, skipCollision = true, }
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local connectorFace = {
        {2, -6.0, 0.0, 1.0},
        {2, 6.0, 0.0, 1.0},
        {-2, 6.0, 0.0, 1.0},
        {-2, -6.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 6.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_3_lanes_country_road_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    local hasBus = _getHasBus(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -4, .0}, {-2, -4, .0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, 0, .0}, {-2, 0, .0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, 4, 0}, {-2, 4, 0}, {2, 0, 0}, {2, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, 4, 0}, {1.8, 4, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, 0, 0}, {1.8, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -4, 0}, {1.8, -4, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_3_lane_country_road.lua' or 'lollo_medium_1_way_3_lane_3_tram_tracks_country_road.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {6, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_Motorway_2_1_lane_narrow_sidewalk_to_2_lane_one_way(params)
    local result = { cost = 0, skipCollision = true, }
    local _pitchAngle = pitchHelper.getPitchAngle(params)

    local connectorFace = {
        {2, -4.0, 0.0, 1.0},
        {2, 4.0, 0.0, 1.0},
        {-2, 4.0, 0.0, 1.0},
        {-2, -4.0, 0.0, 1.0}
    }
    result.groundFaces = _getGroundFaces(connectorFace)

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 4.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_country_road_narrow_sidewalk.mdl',
            skipCollision = true,
            transf = pitchHelper.getIdTransfPitched(_pitchAngle)
        }
    }

    local tramTrackType = _getTramTrackType(params)
    local hasBus = _getHasBus(params)
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, -2, .0}, {-2, -2, .0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_country_road_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-4, 2, 0}, {-2, 2, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {0} or {1})
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, 2, 0}, {1.8, 2, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {-1.8, -2, 0}, {1.8, -2, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                hasBus = hasBus,
                skipCollision = true,
                type = tramTrackType == 'NO' and 'standard/country_medium_one_way_new.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_country_road.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(_pitchAngle, params, {2, 0, 0}, {6, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end


function data()
    return {
        type = 'STREET_CONSTRUCTION',
        description = {
            name = _('Street merging'),
            description = _('Merges multiple streets and a single broader street. Use O and P to adjust the pitch while building and the slider while upgrading.')
        },
        availability = {
            yearFrom = 1925,
            yearTo = 0
        },
        order = 1241,
        params = {
            {
                key = 'mergingType',
                name = _('Street merging type'),
                values = {
                    '↑  ↑   -   ↑↑', -- 0
                    '↑    ↑   -   ↑↑', -- 1
                    '↓  ↑   -   ↓↑', -- 2
                    '↓    ↑   -   ↓↑', -- 3
                    '↑  ↑  ↑   -   ↑↑↑', -- 4
                    '↑    ↑    ↑   -   ↑↑↑', -- 5
                    '↑  ↑  ↑  ↑   -   ↑↑↑↑', -- 6
                    '↓  ↓  ↑  ↑   -   ↓↓↑↑', -- 7
                    '↓  ↓  ↑  ↑   -   ↓ ↓ ↑ ↑', -- 8
                    '↓↓   ↑↑   -   ↓ ↓ ↓ ↑ ↑ ↑', -- 9
                    '↓↓↓   ↑↑↑   -   ↓ ↓ ↓ ↑ ↑ ↑', -- 10
                    'M ↓↓↓   ↑↑↑   -   ↓ ↓ ↓ ↑ ↑ ↑', -- 11
                    'M ↓↓   ↑↑   -   ↓ ↓ ↓ ↑ ↑ ↑', -- 12
                    'M ↓↓   ↑↑   -   ↓ ↓ ↑ ↑', -- 13
                    'M ↑  ↑  ↑   -   ↑↑↑', -- 14
                    'M ↑  ↑   -   ↑↑', -- 15
                    'M ↓  ↑   -   ↓↑', -- 16
                },
                defaultIndex = 0
            },
            {
                key = 'direction',
                name = _('Direction (only one-way roads)'),
                values = {
                    _('↑'),
                    _('↓')
                },
                defaultIndex = 0
            },
            {
                key = 'snapNodes',
                name = _('Snap to neighbours'),
                values = {
                    _('No'),
                    _('Yes')
                },
                defaultIndex = 0
            },
            {
                key = 'tramTrack',
                name = _('Tram track type'),
                values = {
                    -- must be in this sequence
                    _('NO'),
                    _('YES'),
                    _('ELECTRIC')
                },
                defaultIndex = 2
            },
            -- {
            --     key = 'hasBus',
            --     name = _('Bus lane'),
            --     values = {
            --         _('No'),
            --         _('Yes')
            --     },
            --     defaultIndex = 0
            -- },
            {
                key = 'pitch',
                name = _('Pitch (adjust it with O and P while building)'),
                values = pitchHelper.getPitchParamValues(),
                defaultIndex = pitchHelper.getDefaultPitchParamValue(),
                uiType = 'SLIDER'
            }
        },
        --autoRemovable = false, -- Used to allow the construction to be removed, if it collides with something else.
        skipCollision = true,
        --skipCollisionCheck = true,
        updateFn = function(params)
            if params.mergingType == 0 then
                return updateFn_2_1_lane_narrow_sidewalk_to_2_lane_one_way(params)
            elseif params.mergingType == 1 then
                return updateFn_2_1_lane_medium_sidewalk_to_2_lane_one_way(params)
            elseif params.mergingType == 2 then
                return updateFn_2_1_lane_narrow_sidewalk_to_2_lane(params)
            elseif params.mergingType == 3 then
                return updateFn_2_1_lane_medium_sidewalk_to_2_lane(params)
            elseif params.mergingType == 4 then
                return updateFn_3_1_lane_narrow_sidewalk_to_3_lane_one_way(params)
            elseif params.mergingType == 5 then
                return updateFn_3_1_lane_medium_sidewalk_to_3_lane_one_way(params)
            elseif params.mergingType == 6 then
                return updateFn_4_1_lane_narrow_sidewalk_to_4_lane_one_way(params)
            elseif params.mergingType == 7 then
                return updateFn_4_1_lane_narrow_sidewalk_to_4_lane(params)
            elseif params.mergingType == 8 then
                return updateFn_4_1_lane_narrow_sidewalk_to_4_lane_large(params)
            elseif params.mergingType == 9 then
                return updateFn_2_2_lane_one_way_to_6_lane_x_large(params)
            elseif params.mergingType == 10 then
                return updateFn_6_1_lane_one_way_to_6_lane_x_large(params)
            elseif params.mergingType == 11 then
                return updateFn_Motorway_6_1_lane_one_way_to_6_lane_x_large(params)
            elseif params.mergingType == 12 then
                return updateFn_Motorway_2_2_lane_one_way_to_6_lane_x_large(params)
            elseif params.mergingType == 13 then
                return updateFn_Motorway_4_1_lane_one_way_to_4_lane_large(params)
            elseif params.mergingType == 14 then
                return updateFn_Motorway_3_1_lane_narrow_sidewalk_to_3_lane_one_way(params)
            elseif params.mergingType == 15 then
                return updateFn_Motorway_2_1_lane_narrow_sidewalk_to_2_lane_one_way(params)
            else
                return updateFn_Motorway_2_1_lane_narrow_sidewalk_to_2_lane(params)
            end
        end,
        upgradeFn = function(params)
            -- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
            -- If you leave it out, adding and removing tram tracks won't work.
            -- (Bus lanes don't work anyway.)
            return {}
        end
    }
end
