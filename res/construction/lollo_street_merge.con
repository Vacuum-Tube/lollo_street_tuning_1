local dump = require 'luadump'
local laneutil = require('laneutil')
local pitchUtil = require('pitchUtil')
local transf = require 'transf'

local function _makeEdges(params, node0, node1, tan0, tan1)
    -- return params.direction == 0 and
    --     {
    --         -- one entry refers to a position and a tangent
    --         {pitchUtil.getXYZPitched(params.pitch, {-6, -3, .0}), {1, .0, .0}}, -- node 0
    --         {pitchUtil.getXYZPitched(params.pitch, {-2, -3, .0}), {1, .0, .0}} -- node 1
    --     } or
    --     {
    --         {pitchUtil.getXYZPitched(params.pitch, {-2, -3, .0}), {-1, .0, .0}}, -- node 0
    --         {pitchUtil.getXYZPitched(params.pitch, {-6, -3, .0}), {-1, .0, .0}} -- node 1
    --     }
    return params.direction == 0 and
        {
            -- one entry refers to a position and a tangent
            {pitchUtil.getXYZPitched(params.pitch, node0), tan0}, -- node 0
            {pitchUtil.getXYZPitched(params.pitch, node1), tan1} -- node 1
        } or
        {
            {pitchUtil.getXYZPitched(params.pitch, node1), {-tan1[1], -tan1[2], -tan1[3]}}, -- node 0
            {pitchUtil.getXYZPitched(params.pitch, node0), {-tan0[1], -tan0[2], -tan0[3]}} -- node 1
        }
end

local function updateFn_2_to_2_narrow_sidewalk(params)
    local result = {}

    result.cost = 0

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-4, 8.0, 0.0, 1.0},
        {-4, -8.0, 0.0, 1.0}
    }
    result.groundFaces = {
        {
            face = connectorFace,
            modes = {
                {
                    type = 'FILL',
                    key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                }
            }
        }
    }

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {3, 8.0, 0.15}
            }
        }
    }

    --		result.h0 = {}
    --		result.h1 = {}
    -- result.skipCollision = true
    -- result.skipCollisionCheck = true
    --		result.stations = {}
    --		result.terminalGroups = {}
    --		result.terrainAlignmentLists = {}
    -- result.terrainAlignmentLists = {
    --     {
    --         type = 'EQUAL',
    --         faces = {}
    --     }
    -- }
    -- LOLLO try the models/model/station/road/streetstation/pedestrian_era_c/
    -- straight_spcl_l, straight_spcl_r, straight_spcl2_l and straight_spcl2_r mdl files
    -- or corner_in.mdl and corner_out.mdl
    -- from the stock game to make rounded pavement corners
    -- the entr_cntr* files are the tram tracks with or without catenary
    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_narrow_sidewalk.mdl',
            skipCollision = true,
            -- skipCollisionCheck = true,
            -- transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
            transf = pitchUtil.getIdTransfPitched(params.pitch)
        }
    }

    -- does not pull, neither do hasBusLane and busLane, with true or false
    -- local busLaneType = params.busLane and (({'NO', 'YES'})[params.busLane + 1]) or 'NO'
    local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                -- busLaneType = busLaneType, -- does not pull, neither do hasBusLane and busLane, with true or false
                skipCollision = true,
                --skipCollisionCheck = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-6, -3, .0}, {-2, -3, .0}, {1, .0, .0}, {1, .0, .0}),
            -- edgeType = "BRIDGE",
            -- edgeTypeName = "cement.lua",
            --freeNodes = { 0, 1 },
            --freeNodes = { 1 },
            -- freeNodes = {},
            freeNodes = params.direction == 0 and {0} or {1},
            --snapNodes = {1}, -- node 1 is allowed to snap to other edges of the same type
            snapNodes = {}
            --					tag2nodes = {},
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-6, 3, 0}, {-2, 3, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-1.8, 3, 0}, {1.8, 3, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-1.8, -3, 0}, {1.8, -3, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_2_lane_medium_sidewalk_street.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_medium_sidewalk_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {2, 0, 0}, {10, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_2_to_2_medium_sidewalk(params)
    local result = {}
    result.cost = 0

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 8.0, 0.0, 1.0},
        {-2, -8.0, 0.0, 1.0}
    }
    result.groundFaces = {
        {
            face = connectorFace,
            modes = {
                {
                    type = 'FILL',
                    key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                }
            }
        }
    }

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_2_lanes_medium_sidewalk.mdl',
            skipCollision = true,
            -- skipCollisionCheck = true,
            transf = pitchUtil.getIdTransfPitched(params.pitch)
        }
    }

    local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-6, -4, 0}, {-2, -4, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-6, 4, 0}, {-2, 4, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-1.8, 4, 0}, {1.8, 3, 0}, {4, -0.1, 0}, {4, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-1.8, -4, 0}, {1.8, -3, 0}, {4, 0.1, 0}, {4, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_2_lane_medium_sidewalk_street.lua' or 'lollo_medium_1_way_2_lane_2_tram_tracks_medium_sidewalk_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {2, 0, 0}, {10, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_3_to_3_narrow_sidewalk(params)
    local result = {}
    result.cost = 0

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-2, 8.0, 0.0, 1.0},
        {-2, -8.0, 0.0, 1.0}
    }
    result.groundFaces = {
        {
            face = connectorFace,
            modes = {
                {
                    type = 'FILL',
                    key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                }
            }
        }
    }

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {2, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_3_lanes_narrow_sidewalk.mdl',
            transf = pitchUtil.getIdTransfPitched(params.pitch)
        }
    }

    local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-6, -4, 0}, {-2, -4, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-6, 0, 0}, {-2, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-6, 4, 0}, {-2, 4, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-1.8, 4, 0}, {1.8, 4, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-1.8, 0, 0}, {1.8, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-1.8, -4, 0}, {1.8, -4, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_3_lane_street.lua' or 'lollo_medium_1_way_3_lane_3_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {2, 0, 0}, {10, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_3_to_3_medium_sidewalk(params)
    local result = {}
    result.cost = 0

    local connectorFace = {
        {2, -12.0, 0.0, 1.0},
        {2, 12.0, 0.0, 1.0},
        {-10, 12.0, 0.0, 1.0},
        {-10, -12.0, 0.0, 1.0}
    }
    result.groundFaces = {
        {
            face = connectorFace,
            modes = {
                {
                    type = 'FILL',
                    key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                }
            }
        }
    }

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {6.0, 12.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_3_lanes_medium_sidewalk.mdl',
            transf = pitchUtil.getIdTransfPitched(params.pitch)
        }
    }

    local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-10, -8, 0}, {-6, -8, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-10, 0, 0}, {-6, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-10, 8, 0}, {-6, 8, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-5.8, 8, 0}, {1.8, 4, 0}, {8, -0.1, 0}, {8, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-5.8, 0, 0}, {1.8, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-5.8, -8, 0}, {1.8, -4, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_3_lane_street.lua' or 'lollo_medium_1_way_3_lane_3_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {2, 0, 0}, {10, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

local function updateFn_4_to_4_narrow_sidewalk(params)
    local result = {}
    result.cost = 0

    local connectorFace = {
        {2, -8.0, 0.0, 1.0},
        {2, 8.0, 0.0, 1.0},
        {-6, 8.0, 0.0, 1.0},
        {-6, -8.0, 0.0, 1.0}
    }
    result.groundFaces = {
        {
            face = connectorFace,
            modes = {
                {
                    type = 'FILL',
                    key = 'shared/asphalt_01.gtex.lua' --'shared/gravel_03.gtex.lua'
                }
            }
        }
    }

    result.colliders = {
        {
            type = 'BOX',
            params = {
                halfExtents = {4, 8.0, 0.15}
            }
        }
    }

    result.models = {
        {
            id = 'lollo_assets/lollo_street_confluence_4_lanes_narrow_sidewalk.mdl',
            transf = pitchUtil.getIdTransfPitched(params.pitch)
        }
    }

    local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
    result.edgeLists = {
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-10, -6, 0}, {-6, -6, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-10, -2, 0}, {-6, -2, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-10, 2, 0}, {-6, 2, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-10, 6, 0}, {-6, 6, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {0} or {1},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-5.8, 6, 0}, {1.8, 4.5, 0}, {8, -0.1, 0}, {8, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-5.8, 2, 0}, {1.8, 1.5, 0}, {8, -0.1, 0}, {8, -0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-5.8, -2, 0}, {1.8, -1.5, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = 'lollo_internal_1_way_1_lane_street_no_sidewalk.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {-5.8, -6, 0}, {1.8, -4.5, 0}, {8, 0.1, 0}, {8, 0.1, 0}),
            freeNodes = {},
            snapNodes = {}
        },
        {
            type = 'STREET',
            params = {
                skipCollision = true,
                type = tramTrackType == 'NO' and 'lollo_medium_1_way_4_lane_street.lua' or 'lollo_medium_1_way_4_lane_4_tram_tracks_street.lua',
                tramTrackType = tramTrackType
            },
            edges = _makeEdges(params, {2, 0, 0}, {10, 0, 0}, {1, 0, 0}, {1, 0, 0}),
            freeNodes = params.direction == 0 and {1} or {0},
            snapNodes = params.snapNodes == 0 and {} or (params.direction == 0 and {1} or {0})
        }
    }

    return result
end

function data()
    return {
        type = 'STREET_CONSTRUCTION',
        description = {
            name = _('Street merging'),
            description = _('Merges multiple streets and a single broader street.')
        },
        availability = {
            yearFrom = 1925,
            yearTo = 0
        },
        -- categories = {'one-way'}, -- no way to get the arrows reversed with right - click
        -- params = { -- LOLLO here, you can add some parameters, such as the street type
        --     {
        --         key = "streetType2",
        --         name = _("Number of lanes"),
        --         values = { _("2"), _("3") },
        --         defaultIndex = 0,
        --         yearFrom = 1960,
        --         yearTo = 0
        --     },
        --     {
        --         key = "scale",
        --         name = _("Scale"),
        --         values = { _("Small"), _("Medium"), _("Large") },
        --         defaultIndex = 0,
        --         yearFrom = 1960,
        --         yearTo = 0
        --     },
        -- },
        order = 1,
        params = {
            {
                key = 'mergingType',
                name = _('Street merging type'),
                values = {
                    _('¦   ¦   <->   ||'),
                    _('|   |   <->   ||'),
                    _('¦   ¦   ¦   <->   |||'),
                    _('|   |   |   <->   |||'),
                    _('¦   ¦   ¦   ¦   <->   ||||')
                },
                defaultIndex = 0
            },
            {
                key = 'direction',
                name = _('Direction'),
                values = {
                    _('↑'),
                    _('↓')
                },
                defaultIndex = 0
            },
            {
                key = 'tramTrack',
                name = _('Tram track type'),
                values = {
                    -- must be in this sequence
                    _('NO'),
                    _('YES'),
                    _('ELECTRIC')
                },
                defaultIndex = 2
            },
            {
                key = 'snapNodes',
                name = _('Snap to neighbours'),
                values = {
                    _('No'),
                    _('Yes')
                },
                defaultIndex = 0
            },
            {
                key = 'pitch',
                name = _('Pitch (use arrows to adjust it while placing)'),
                values = pitchUtil.getPitchValues(),
                defaultIndex = pitchUtil.getDefaultPitch(),
                uiType = 'SLIDER'
            }
        },
        --autoRemovable = false, -- Used to allow the construction to be removed, if it collides with something else.
        skipCollision = true,
        --skipCollisionCheck = true,
        updateFn = function(params)
            -- local lanes =
            --     laneutil.createLanes(
            --     {
            --         curves = {
            --             ['right_lane'] = {
            --                 -- right with | | below and || above
            --                 {{-1.9, 4.0, .0}, {-1.2, 3.8, .0}, {1.2, 2.2, .0}, {1.9, 2, .0}}
            --             },
            --         }
            --     },
            --     {'BUS', 'CAR', 'ELECTRIC_TRAM', 'TRAM', 'TRUCK'},
            --     100,
            --     3,
            --     false --linkable
            -- )
            -- dump(true)(lanes)

            -- local lanes =
            --     laneutil.createLanes(
            --     {
            --         curves = {
            --             ['left_lane'] = {
            --                 -- left with | | below and || above
            --                 {{-1.9, -4.0, .0}, {-1.2, -3.8, .0}, {1.2, -2.2, .0}, {1.9, -2, .0}}
            --             }
            --         }
            --     },
            --     {'BUS', 'CAR', 'ELECTRIC_TRAM', 'TRAM', 'TRUCK'},
            --     100,
            --     3,
            --     false --linkable
            -- )
            -- dump(true)(lanes)

            params.pitch = params.pitch - pitchUtil.getMiddlePitch()
            if params.mergingType == 0 then
                return updateFn_2_to_2_narrow_sidewalk(params)
            elseif params.mergingType == 1 then
                return updateFn_2_to_2_medium_sidewalk(params)
            elseif params.mergingType == 2 then
                return updateFn_3_to_3_narrow_sidewalk(params)
            elseif params.mergingType == 3 then
                return updateFn_3_to_3_medium_sidewalk(params)
            else
                return updateFn_4_to_4_narrow_sidewalk(params)
            end
        end,
        upgradeFn = function(params)
            -- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
            -- If you leave it out, adding and removing tram tracks won't work.
            -- (Bus lanes don't work anyway.)
            -- print('LOLLO streets merging upgradeFn')
            -- dump(true)(params)
            return {}
        end
    }
end
