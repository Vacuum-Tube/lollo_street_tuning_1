local luadump = require('lollo_street_tuning/luadump')
-- local inspect = require('inspect')
-- LOLLO NOTE we free all edges, so they can be converted freely. We couls also make a lot of combinations and upgrade them with the construction params, but that might look messy inm the end.
local arrayUtils = require('lollo_street_tuning/lolloArrayUtils')
local streetChunksHelper = require('lollo_street_tuning/lolloStreetChunksHelper')
local pitchUtil = require('lollo_street_tuning/lolloPitchUtil')
function data()
    -- local _chunkedStreetTypes = {
    --     'lollo_medium_1_way_1_lane_street_narrow_sidewalk.lua',
    --     'lollo_medium_1_way_1_lane_street.lua'
    -- }

    local function _getSnapEdgeLists(params, pitchAdjusted, streetData, tramTrackType)
        local streetHalfWidth = streetData.sidewalkWidth + streetData.streetWidth * 0.5
        local streetFullWidth = streetData.sidewalkWidth + streetData.sidewalkWidth + streetData.streetWidth

        local distance = params.distance or 0.0
        local halfDistance = distance * 0.5
        local halfExtraLength = (params.extraLength or 0.0) * 0.5 * streetChunksHelper.getLengthMultiplier()
        local halfIslandWidth = (params.islandWidth or 0.0) * 0.5

        -- LOLLO TODO check this, it might need extending
        -- local x0 = - math.max(9.0, streetHalfWidth + 1.0) - streetHalfWidth - halfExtraLength
        local x0 = - math.max(8.0, streetHalfWidth + 1.0) - streetHalfWidth - halfExtraLength -- this is the fruit of trial and error: if x1 - x0 is too little, snapping will dump
        local x1 = - streetHalfWidth - halfExtraLength
        local x2 = - x1
        local x3 = - x0

        -- print('LOLLO streetHalfWidth = ', streetHalfWidth)
        -- print('LOLLO 2.0 * streetHalfWidth = ', 2.0 * streetHalfWidth)
        -- print('LOLLO streetFullWidth = ', streetFullWidth)
        -- print('LOLLO halfDistance = ', halfDistance)
        -- print('LOLLO halfIslandWidth = ', halfIslandWidth)
        local edgeParams = {
            skipCollision = true,
            type = streetData.fileName,
            tramTrackType = tramTrackType
        }
        local edgeLists
        if params.howManyStreetsBase0 == 0 then -- 1 street
            edgeLists = {
                -- low x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, 0, 0},
                        {x1, 0, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                    --					snapNodes = { 0, 1 },  -- node 0 and 1 are allowed to snap to other edges of the same type --crashes
                    --					tag2nodes = {},
                },
                -- centre x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, 0, 0},
                        {x2, 0, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                -- high x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, 0, 0},
                        {x3, 0, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                }
            }
        elseif params.howManyStreetsBase0 == 1 then -- 2 streets
            edgeLists = {
                -- low x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x1, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x1, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                -- centre x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x2, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x2, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                -- high x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x3, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x3, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                }
            }
        elseif params.howManyStreetsBase0 == 2 then -- 3 streets
            edgeLists = {
                -- low x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, -streetFullWidth - distance - halfIslandWidth, 0},
                        {x1, -streetFullWidth - distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, halfIslandWidth, 0},
                        {x1, halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, streetFullWidth + distance + halfIslandWidth, 0},
                        {x1, streetFullWidth + distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                -- centre x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, -streetFullWidth - distance - halfIslandWidth, 0},
                        {x2, -streetFullWidth - distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, halfIslandWidth, 0},
                        {x2, halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, streetFullWidth + distance + halfIslandWidth, 0},
                        {x2, streetFullWidth + distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                -- high x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, -streetFullWidth - distance - halfIslandWidth, 0},
                        {x3, -streetFullWidth - distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, halfIslandWidth, 0},
                        {x3, halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, streetFullWidth + distance + halfIslandWidth, 0},
                        {x3, streetFullWidth + distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                }
            }
        elseif params.howManyStreetsBase0 == 3 then -- 4 streets
            edgeLists = {
                -- low x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, -3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        {- streetHalfWidth, -3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x1, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x1, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0},
                        {x1, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                -- centre x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, -3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        {x2, -3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x2, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x2, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0},
                        {x2, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                -- high x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, -3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        {x3, -3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x3, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x3, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0},
                        {x3, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                }
            }
        elseif params.howManyStreetsBase0 == 4 then -- 5 streets
            edgeLists = {
                -- low x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, - 2.0 * streetFullWidth - 2.0 * distance - halfIslandWidth, 0},
                        {x1, - 2.0 * streetFullWidth - 2.0 * distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, -streetFullWidth - distance - halfIslandWidth, 0},
                        {x1, -streetFullWidth - distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, halfIslandWidth, 0},
                        {x1, halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, streetFullWidth + distance + halfIslandWidth, 0},
                        {x1, streetFullWidth + distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, 2.0 * streetFullWidth + 2.0 * distance + halfIslandWidth, 0},
                        {x1, 2.0 * streetFullWidth + 2.0 * distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                -- centre x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, - 2.0 * streetFullWidth - 2.0 * distance - halfIslandWidth, 0},
                        {x2, - 2.0 * streetFullWidth - 2.0 * distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, -streetFullWidth - distance - halfIslandWidth, 0},
                        {x2, -streetFullWidth - distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, halfIslandWidth, 0},
                        {x2, halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, streetFullWidth + distance + halfIslandWidth, 0},
                        {x2, streetFullWidth + distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, 2.0 * streetFullWidth + 2.0 * distance + halfIslandWidth, 0},
                        {x2, 2.0 * streetFullWidth + 2.0 * distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                -- high x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, - 2.0 * streetFullWidth - 2.0 * distance - halfIslandWidth, 0},
                        {x3, - 2.0 * streetFullWidth - 2.0 * distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, -streetFullWidth - distance - halfIslandWidth, 0},
                        {x3, -streetFullWidth - distance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, halfIslandWidth, 0},
                        {x3, halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, streetFullWidth + distance + halfIslandWidth, 0},
                        {x3, streetFullWidth + distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, 2.0 * streetFullWidth + 2.0 * distance + halfIslandWidth, 0},
                        {x3, 2.0 * streetFullWidth + 2.0 * distance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                }
            }
        else -- if params.howManyStreetsBase0 == 5 then -- 6 streets -- fallback
            edgeLists = {
                -- low x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, - 5.0 * streetHalfWidth - 5.0 * halfDistance - halfIslandWidth, 0},
                        {x1, - 5.0 * streetHalfWidth - 5.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, - 3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        {x1, - 3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x1, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x1, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0},
                        {x1, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x0, 5.0 * streetHalfWidth + 5.0 * halfDistance + halfIslandWidth, 0},
                        {x1, 5.0 * streetHalfWidth + 5.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesLowX(params),
                    snapNodes = streetChunksHelper.getSnapNodesLowX(params)
                },
                -- centre x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, - 5.0 * streetHalfWidth - 5.0 * halfDistance - halfIslandWidth, 0},
                        {x2, - 5.0 * streetHalfWidth - 5.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, - 3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        {x2, - 3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x2, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x2, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0},
                        {x2, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x1, 5.0 * streetHalfWidth + 5.0 * halfDistance + halfIslandWidth, 0},
                        {x2, 5.0 * streetHalfWidth + 5.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesCentre(params),
                    snapNodes = streetChunksHelper.getSnapNodesCentre(params)
                },
                -- high x
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, - 5.0 * streetHalfWidth - 5.0 * halfDistance - halfIslandWidth, 0},
                        {x3, - 5.0 * streetHalfWidth - 5.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, - 3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        {x3, - 3.0 * streetHalfWidth - 3.0 * halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        {x3, -streetHalfWidth - halfDistance - halfIslandWidth, 0},
                        true
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params, true),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params, true)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, streetHalfWidth + halfDistance + halfIslandWidth, 0},
                        {x3, streetHalfWidth + halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0},
                        {x3, 3.0 * streetHalfWidth + 3.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                },
                {
                    type = 'STREET',
                    params = edgeParams,
                    edges = streetChunksHelper.makeEdges(
                        params.direction,
                        pitchAdjusted,
                        {x2, 5.0 * streetHalfWidth + 5.0 * halfDistance + halfIslandWidth, 0},
                        {x3, 5.0 * streetHalfWidth + 5.0 * halfDistance + halfIslandWidth, 0}
                    ),
                    freeNodes = streetChunksHelper.getFreeNodesHighX(params),
                    snapNodes = streetChunksHelper.getSnapNodesHighX(params)
                }
            }
        end
        return edgeLists
    end

    local defaultStreetTypeIndex = arrayUtils.findIndex(streetChunksHelper.getGlobalStreetData(game), 'fileName', 'lollo_medium_1_way_1_lane_street.lua') - 1
    if defaultStreetTypeIndex < 0 then defaultStreetTypeIndex = 0 end

    return {
        type = 'STREET_CONSTRUCTION',
        description = {
            name = _('Street chunks'),
            description = _('Lays chunks of street, single or multiple in parallel. Use O and P to adjust the pitch.')
        },
        availability = {
            yearFrom = 1925,
            yearTo = 0
        },
        params = {
            {
                key = 'streetType_',
                name = _('Street type'),
                values = arrayUtils.map(
                    streetChunksHelper.getGlobalStreetData(game),
                    function(str)
                        return str.name
                    end
                ),
                uiType = 'COMBOBOX',
                defaultIndex = defaultStreetTypeIndex
                -- yearFrom = 1925,
                -- yearTo = 0
            },
            {
                key = 'howManyStreetsBase0',
                name = _('Number of roads'),
                values = {_('1'), _('2'), _('3'), _('4'), _('5'), _('6')},
                defaultIndex = 1
                -- yearFrom = 1925,
                -- yearTo = 0
            },
            {
                key = 'snapNodes',
                name = _('Snap to neighbours'),
                values = {
                    _('No'),
                    _('Yes')
                },
                defaultIndex = 0
            },
            {
                key = 'lockLayoutCentre',
                name = _('Lock chunks'),
                tooltip = _('Lock chunks to keep their shape pretty and prevent other roads merging in. Unlock them to treat them like ordinary roads. You cannot relock an unlocked construction.'),
                values = {
                    _('No'),
                    _('Yes')
                },
                defaultIndex = 0
            },
            {
                key = 'distance',
                name = _('Distance'),
                -- values = {_('0m'), _('1m'), _('2m'), _('3m'), _('4m')},
                values = arrayUtils.map(
                    streetChunksHelper.getDistances(),
                    function(dis)
                        return tostring(dis) .. 'm'
                    end
                ),
                defaultIndex = 0
            },
            {
                key = 'islandWidth',
                name = _('Island Width'),
                values = arrayUtils.map(
                    streetChunksHelper.getDistances(),
                    function(dis)
                        return tostring(dis) .. 'm'
                    end
                ),
                defaultIndex = 0
            },
            {
                key = 'extraLength',
                name = _('Extra Length'),
                -- values = {_('0m'), _('1m'), _('2m'), _('3m'), _('4m')},
                values = arrayUtils.map(
                    streetChunksHelper.getLengths(),
                    function(length)
                        return tostring(length) .. 'm'
                    end
                ),
                defaultIndex = 0
            },
            -- {
            --     key = "terrainAlignment",
            --     name = _("Terrain alignment"),
            --     values = { _("Yes"), _("No") },
            --     defaultIndex = 1
            -- },
            {
                key = 'direction',
                name = _('Direction'),
                values = {
                    _('↑'),
                    _('↓'),
                    _('↓↑'),
                },
                defaultIndex = 0
            },
            {
                key = 'tramTrack',
                name = _('Tram track type'),
                values = {
                    -- must be in this sequence
                    _('NO'),
                    _('YES'),
                    _('ELECTRIC')
                },
                defaultIndex = 2
            },
            {
                key = 'pitch',
                name = _('Pitch (adjust it with O and P while building)'),
                values = pitchUtil.getPitchParamValues(),
                defaultIndex = pitchUtil.getDefaultPitchParamValue(),
                uiType = 'SLIDER'
            }
        },
        order = 1240,
        -- collider = {
        --     type = 'NONE'
        -- },
        -- autoRemovable = true,
        skipCollision = true,
        --skipCollisionCheck = true,
        updateFn = function(params)
            local pitchAdjusted = pitchUtil.adjustParamsPitch(params)
            local streetData = streetChunksHelper.getGlobalStreetData(game)[params.streetType_ + 1]

            local result = { cost = 0 }
            result.groundFaces = {}
            -- result.colliders = {}
            -- LOLLO NOTE If some edges are not free, I will need a dummy model,
            -- otherwise the game will say "hello there" or "easter egg" or other rubbish,
            -- then point away (to some animal) and do nothing,
            -- when the user clicks on a done construction to configure it.
            result.models = {
                {
                    id = 'lollo_assets/lollo_dummy.mdl',
                    skipCollision = true,
                    transf = pitchUtil.getIdTransfPitched(params.pitch)
                }
            }

            -- LOLLO NOTE I cannot use KEEP here
            local tramTrackType = params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
            -- LOLLO NOTE here, we have 2 half edges for every chunk of road. The inner nodes do not snap, the outer ones do.
            -- This is required if we want to make them snappable at all, to avoid crashes.
            -- We free all edges, so they can be freely converted to whatever one needs.
            -- We could make a lot of combinations and upgrade them with the construction params instead, but that would be a mess to use.
            result.edgeLists = _getSnapEdgeLists(params, pitchAdjusted, streetData, tramTrackType)

            -- print('LOLLO edgeLists = ')
            -- luadump(true)(result.edgeLists)
            -- LOLLO TODO copying from the groundTextureBuilder, we could make the terrain flat to ease the pain when building junctions
            -- if params.terrainAlignment == 1 then
            --     result.terrainAlignmentLists = { { type = "EQUAL", faces =  { } } }
            -- end

            return result
        end,
        upgradeFn = function(params)
            -- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
            -- If you leave it out, adding and removing tram tracks won't work.
            -- (Bus lanes don't work anyway.)
            return {}
        end
    }
end
